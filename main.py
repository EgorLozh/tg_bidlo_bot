import asyncio
import logging
from collections import deque
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from config import BOT_TOKEN
from ollama_client import OllamaClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
ollama_client = OllamaClient()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏—Ö —Å–≤—è–∑–µ–π
message_storage = {}  # {message_id: {message_data}}
MAX_CHAIN_DEPTH = 10
BOT_TRIGGER_WORD = "—Ö—É–±–∞"

class MessageNode:
    def __init__(self, message_id: int, chat_id: int, user_id: int, username: str, text: str, is_bot: bool = False):
        self.message_id = message_id
        self.chat_id = chat_id
        self.user_id = user_id
        self.username = username
        self.text = text
        self.is_bot = is_bot
        self.reply_to_message_id = None  # ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —ç—Ç–æ –æ—Ç–≤–µ—Ç
        self.timestamp = types.Message.date  # –í—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è

def get_message_chain(message: types.Message) -> list:
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç —Ü–µ–ø–æ—á–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –¥–µ—Ä–µ–≤—É –æ—Ç–≤–µ—Ç–æ–≤"""
    chain = []
    current_message = message
    depth = 0
    
    while current_message and depth < MAX_CHAIN_DEPTH:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ü–µ–ø–æ—á–∫—É
        chain.append({
            "role": "assistant" if (current_message.reply_to_message and 
                                   current_message.reply_to_message.from_user.id == bot.id) else "user",
            "name": current_message.from_user.username or current_message.from_user.first_name,
            "content": current_message.text
        })
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –∏–¥–µ–º –¥–∞–ª—å—à–µ –ø–æ —Ü–µ–ø–æ—á–∫–µ
        if (current_message.reply_to_message and 
            current_message.reply_to_message.from_user.id == bot.id):
            current_message = current_message.reply_to_message
            depth += 1
        else:
            break
    
    # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –∫ –Ω–æ–≤–æ–º—É)
    chain.reverse()
    return chain

def should_respond_to_message(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞"""
    if not text or not text.strip():
        return False
    
    cleaned_text = text.strip().lower()
    return cleaned_text.startswith(BOT_TRIGGER_WORD.lower())

def extract_question(text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
    if not text:
        return ""
    
    cleaned_text = text.strip()
    if cleaned_text.lower().startswith(BOT_TRIGGER_WORD.lower()):
        question = cleaned_text[len(BOT_TRIGGER_WORD):].strip()
        return question
    return ""

@dp.message(Command("start"))
async def start_command(message: types.Message):
    bot_info = await bot.get_me()
    await message.answer(
        f"ü§ñ –ë–æ—Ç @{bot_info.username} –∞–∫—Ç–∏–≤–µ–Ω!\n\n"
        f"üí¨ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å —Å–ª–æ–≤–∞ `{BOT_TRIGGER_WORD}`\n\n"
        f"üìö –ë–æ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ü–µ–ø–æ—á–∫–∏ –¥–∏–∞–ª–æ–≥–∞ (–≥–ª—É–±–∏–Ω–∞: {MAX_CHAIN_DEPTH} —Å–æ–æ–±—â–µ–Ω–∏–π)."
    )

@dp.message(Command("ping"))
async def ping_command(message: types.Message):
    await message.answer("üèì –ü–æ–Ω–≥! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–Ω–æ!")

@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        f"üí° **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**\n\n"
        f"–ù–∞—á–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å `{BOT_TRIGGER_WORD}` –∏–ª–∏ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞.\n"
        f"–ë–æ—Ç –±—É–¥–µ—Ç –ø–æ–º–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ–π —Ü–µ–ø–æ—á–∫–∏ –¥–∏–∞–ª–æ–≥–∞.\n\n"
        f"**–ü—Ä–∏–º–µ—Ä:**\n"
        f"1. –í—ã: `{BOT_TRIGGER_WORD} —á—Ç–æ —Ç–∞–∫–æ–µ Python?`\n"
        f"2. –ë–æ—Ç: –æ–±—ä—è—Å–Ω—è–µ—Ç –ø—Ä–æ Python\n"
        f"3. –í—ã (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞): `–ê —á–µ–º –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç Java?`\n"
        f"4. –ë–æ—Ç: –æ—Ç–≤–µ—á–∞–µ—Ç —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
    )

@dp.message()
async def handle_messages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ü–µ–ø–æ—á–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤"""
    text = message.text or ""
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
    logger.info(f"–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.reply_to_message}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –ò–õ–ò –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    should_respond = False
    question = ""
    
    # –°–ª—É—á–∞–π 1: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    if should_respond_to_message(text):
        logger.info("–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")
        question = extract_question(text)
        should_respond = bool(question)
    
    # –°–ª—É—á–∞–π 2: –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    elif (message.reply_to_message and 
          message.reply_to_message.from_user and 
          message.reply_to_message.from_user.id == (await bot.get_me()).id):
        logger.info("–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ –æ—Ç–≤–µ—Ç—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞")
        question = text
        should_respond = True
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if should_respond and question:
        await process_ai_message(message, question)
    else:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")

async def process_ai_message(message: types.Message, question: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ AI –∑–∞–ø—Ä–æ—Å–∞ —Å —Ü–µ–ø–æ—á–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    try:
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å: {question}")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–ø–æ—á–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
        message_chain = get_message_chain(message)
        logger.info(f"–°–æ–±—Ä–∞–Ω–∞ —Ü–µ–ø–æ—á–∫–∞ –∏–∑ {len(message_chain)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await bot.send_chat_action(message.chat.id, "typing")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Ollama —Å —Ü–µ–ø–æ—á–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        response = ollama_client.generate_response(question, message_chain)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        reply_message = await message.reply(response)
        
        logger.info("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"Error: {e}")
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())